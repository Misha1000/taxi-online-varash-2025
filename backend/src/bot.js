// src/bot.js

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { db, admin } = require('./firestore');

// 1) –°—Ç–∞—Ä—Ç—É—î–º–æ –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// 2) –£—Ç–∏–ª—ñ—Ç–∏
const normalizePhone = (p) => (p || '').replace(/\D/g, '');
const session = {}; // –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É { [chatId]: { step, data } }
const rateSession = {}; // { [chatId]: { orderId, passengerPhone } } ‚Äî –∫–æ–ª–∏ –≤–æ–¥—ñ–π –æ—Ü—ñ–Ω—é—î –ø–∞—Å–∞–∂–∏—Ä–∞


// 3) –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ Firestore
async function getPhotoUrl(fileId) {
  // node-telegram-bot-api –º–∞—î –º–µ—Ç–æ–¥ getFileLink
  const link = await bot.getFileLink(fileId);
  return link; // —Ü–µ –ø—Ä—è–º–∏–π URL –¥–æ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram
}
async function getDriverByChatId(chatId) {
  const snap = await db
    .collection('drivers')
    .where('telegramChatId', '==', String(chatId))
    .limit(1)
    .get();
  if (snap.empty) return null;
  const doc = snap.docs[0];
  return { id: doc.id, ...doc.data() };
}

async function getDriverByPhone(phone) {
  const id = normalizePhone(phone);
  const ref = db.collection('drivers').doc(id);
  const snap = await ref.get();
  if (!snap.exists) return null;
  return { id, ...snap.data() };
}

async function saveDriverByPhone(phone, data) {
  const id = normalizePhone(phone);

  if (!id) {
    console.error('[saveDriverByPhone] EMPTY ID! phone =', phone, 'data =', data);
    throw new Error('Invalid phone/id');
  }

  console.log('[saveDriverByPhone] writing doc drivers/' + id);

  const ref = db.collection('drivers').doc(id);
  await ref.set(
    {
      ...data,
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      createdAt: data.createdAt || admin.firestore.FieldValue.serverTimestamp(),
    },
    { merge: true }
  );
  const snap = await ref.get();
  return { id, ...snap.data() };
}


// 4) –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
function showMainMenu(chatId, text = '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é') {
  bot.sendMessage(chatId, text, {
    reply_markup: {
      resize_keyboard: true,
      keyboard: [
        [{ text: 'üìû –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è / –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ' }],
        [{ text: 'üü¢ –Ø –æ–Ω–ª–∞–π–Ω' }, { text: 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å' }],
        [{ text: '‚ÑπÔ∏è –ú—ñ–π —Å—Ç–∞—Ç—É—Å' }],
      ],
    },
  });
}


// 5) –°—Ç–∞—Ä—Ç
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  showMainMenu(chatId, '–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –≤–æ–¥—ñ—è –í–∞—Ä–∞—à –¢–∞–∫—Å—ñ üöï');
});

// 6) –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text || '').trim();

  // –Ø–∫—â–æ –π–¥–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–æ—Ç–æ –∞–≤—Ç–æ
  if (session[chatId]?.step === 'ask_photo' && msg.photo && msg.photo.length) {
    return handleDriverPhoto(msg);
  }

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –∫–æ–Ω—Ç–∞–∫—Ç (–∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º")
  if (msg.contact?.phone_number) {
    return handlePhoneShared(chatId, msg.contact.phone_number);
  }

  // –Ø–∫—â–æ –º–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –ø–∏—Ç–∞—î–º–æ –ø–æ–ª—è —É –≤–æ–¥—ñ—è
  if (session[chatId]?.step) {
    return continueRegistration(msg);
  }
// —è–∫—â–æ –≤–æ–¥—ñ–π –∑–∞—Ä–∞–∑ —É –ø—Ä–æ—Ü–µ—Å—ñ –æ—Ü—ñ–Ω–∫–∏ –ø–∞—Å–∞–∂–∏—Ä–∞
if (rateSession[chatId]) {
  const rate = Number(text);
  if (!Number.isInteger(rate) || rate < 1 || rate > 5) {
    return bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 5.');
  }

  const { orderId, passengerPhone } = rateSession[chatId];
  delete rateSession[chatId];

  try {
    // –∑–±–µ—Ä–µ–∂–µ–º–æ –æ—Ü—ñ–Ω–∫—É –ø–∞—Å–∞–∂–∏—Ä–∞
    await db
      .collection('passengerRatings')
      .doc(passengerPhone.replace(/\D/g, ''))
      .collection('ratings')
      .doc(orderId)
      .set({
        rating: rate,
        driverPhone: (await getDriverByChatId(chatId))?.phone || null,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
      });

    await bot.sendMessage(chatId, '–î—è–∫—É—î–º–æ! –û—Ü—ñ–Ω–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.');
    return showMainMenu(chatId);
  } catch (err) {
    console.error('save passenger rating error', err);
    await bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    return showMainMenu(chatId);
  }
}

  // –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
  switch (text) {
    case 'üìû –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è / –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ':
      return startRegistration(chatId);

    case 'üü¢ –Ø –æ–Ω–ª–∞–π–Ω':
      return goOnline(chatId);

    case '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É':
      return finishOrder(chatId);

    case 'üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å':
      return goOffline(chatId);

    case '‚ÑπÔ∏è –ú—ñ–π —Å—Ç–∞—Ç—É—Å':
      return showStatus(chatId);

    case '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
      return finishOrder(chatId);

    default:
      // —ñ–≥–Ω–æ—Ä—É—î–º–æ —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç
      break;
  }
});

// 7) –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî —Å—Ç–∞—Ä—Ç
async function startRegistration(chatId) {
  session[chatId] = { step: 'ask_phone', data: {} };

  return bot.sendMessage(
    chatId,
    '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...)',
    {
      reply_markup: {
        resize_keyboard: true,
        one_time_keyboard: true,
        keyboard: [
          [{ text: '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true }],
          [{ text: '‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏' }],
        ],
      },
    }
  );
}

// 8) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äú–ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º‚Äù
async function handlePhoneShared(chatId, phone_number) {
  if (!session[chatId]) {
    // —è–∫—â–æ –Ω–µ–º–∞—î —Å–µ—Å—ñ—ó ‚Äî –ø–æ—á–Ω–µ–º–æ —Å–∞–º—ñ
    session[chatId] = { step: 'ask_phone', data: {} };
  }
  session[chatId].data.phone = phone_number;
  return askName(chatId);
}

// 9) –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–∫–æ–ª–∏ –º–∏ –≤ —è–∫–æ–º—É—Å—å –∫—Ä–æ—Ü—ñ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à–ª–µ —Ç–µ–∫—Å—Ç)
async function continueRegistration(msg) {
  const chatId = msg.chat.id;
  const text = (msg.text || '').trim();
  const s = session[chatId];

  if (text === '‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏') {
    delete session[chatId];
    return showMainMenu(chatId, '–°–∫–∞—Å–æ–≤–∞–Ω–æ.');
  }

  switch (s.step) {
    case 'ask_phone':
      // –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É
      s.data.phone = text;
      return askName(chatId);

    case 'ask_name':
      s.data.name = text;
      return askCarBrand(chatId);

    case 'ask_brand':
      s.data.carBrand = text;
      return askCarPlate(chatId);

    case 'ask_plate':
      s.data.carPlate = text;
      return askPhoto(chatId);

    default:
      // —è–∫—â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫ ‚Äî —Å–∫–∏–Ω–µ–º–æ
      delete session[chatId];
      return showMainMenu(chatId, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω—ñ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.');
  }
}

// 10) –ü–∏—Ç–∞–Ω–Ω—è: —ñ–º‚Äô—è
function askName(chatId) {
  session[chatId].step = 'ask_name';
  bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º º—è:');
}

// 11) –ü–∏—Ç–∞–Ω–Ω—è: –º–∞—Ä–∫–∞ –∞–≤—Ç–æ
function askCarBrand(chatId) {
  session[chatId].step = 'ask_brand';
  bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Skoda Octavia):');
}

// 12) –ü–∏—Ç–∞–Ω–Ω—è: –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
function askCarPlate(chatId) {
  session[chatId].step = 'ask_plate';
  bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ä–∂–∞–≤–Ω–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, AA1234BB):');
}

// 13) –ü–∏—Ç–∞–Ω–Ω—è: —Ñ–æ—Ç–æ –∞–≤—Ç–æ
function askPhoto(chatId) {
  session[chatId].step = 'ask_photo';
  bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è (–æ–¥–Ω–∏–º —Ñ–æ—Ç–æ).');
}

// 14) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ –∞–≤—Ç–æ
// 14) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ –∞–≤—Ç–æ
async function handleDriverPhoto(msg) {
  const chatId = msg.chat.id;
  const s = session[chatId];

  try {
    if (!s || s.step !== 'ask_photo') {
      console.warn('[handleDriverPhoto] step mismatch or no session', { chatId, s });
      return;
    }

    if (!msg.photo || !msg.photo.length) {
      await bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏—à–ª—ñ—Ç—å —Å–∞–º–µ —Ñ–æ—Ç–æ.');
      return;
    }

    const fileId = msg.photo[msg.photo.length - 1].file_id;

    const phone = s.data.phone;
    const normPhone = normalizePhone(phone);
    if (!phone || !normPhone) {
      console.error('[handleDriverPhoto] phone missing or invalid', { phone, normPhone, chatId, s });
      await bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ.');
      delete session[chatId];
      return showMainMenu(chatId, '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ ¬´üìû –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è / –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ¬ª.');
    }

    // –û–¢–†–ò–ú–ê–Ñ–ú–û –ü–†–Ø–ú–ò–ô URL
    const photoUrl = await getPhotoUrl(fileId);

    console.log('[handleDriverPhoto] saving driver', {
      phone,
      normPhone,
      chatId,
      name: s.data.name,
      carBrand: s.data.carBrand,
      carPlate: s.data.carPlate,
      fileId,
      photoUrl,
    });

    await saveDriverByPhone(phone, {
      phone,
      telegramChatId: String(chatId),
      name: s.data.name,
      carBrand: s.data.carBrand,
      carPlate: s.data.carPlate,
      photoFileId: fileId,
      photoUrl,              // <-- –¢–ï–ü–ï–† –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û URL
      status: 'offline',
    });

    delete session[chatId];

    await bot.sendMessage(chatId, '‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω —ñ –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
    showMainMenu(chatId);
  } catch (err) {
    console.error('[handleDriverPhoto] error:', err);
    await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
}

async function finishOrder(chatId) {
  try {
    const driver = await getDriverByChatId(chatId);
    if (!driver) {
      return showMainMenu(chatId, '–°–ø–µ—Ä—à—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.');
    }

    const orderId = driver.currentOrderId;
    if (!orderId) {
      // –Ω–µ –±—É–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä—Ç–∞—î–º–æ online
      await saveDriverByPhone(driver.phone || driver.id, {
        status: 'online',
        currentOrderId: null,
        telegramChatId: String(chatId),
      });
      await bot.sendMessage(chatId, '–°—Ç–∞—Ç—É—Å: üü¢ online');
      return showMainMenu(chatId);
    }

    // –∑–Ω–∞–π–¥–µ–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    const orderRef = db.collection('orders').doc(orderId);
    const orderSnap = await orderRef.get();
    if (!orderSnap.exists) {
      // –≤—Å–µ –æ–¥–Ω–æ –∑–≤—ñ–ª—å–Ω–∏–º –≤–æ–¥—ñ—è
      await saveDriverByPhone(driver.phone || driver.id, {
        status: 'online',
        currentOrderId: null,
        telegramChatId: String(chatId),
      });
      await bot.sendMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –≤–∏ –≤–∂–µ üü¢ online');
      return showMainMenu(chatId);
    }

    const order = orderSnap.data();

    // –ø–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–º
    await orderRef.set(
      {
        status: 'finished',
        finishedAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      },
      { merge: true }
    );

    // –≤–æ–¥—ñ—è –Ω–∞–∑–∞–¥ online
    await saveDriverByPhone(driver.phone || driver.id, {
      status: 'online',
      currentOrderId: null,
      telegramChatId: String(chatId),
    });

    // —Ç–µ–ø–µ—Ä –ø–æ–ø—Ä–æ—Å–∏–º–æ –æ—Ü—ñ–Ω–∫—É –ø–∞—Å–∞–∂–∏—Ä–∞
    rateSession[chatId] = {
      orderId,
      passengerPhone: order.passengerPhone,
    };

    await bot.sendMessage(chatId, '‚úÖ –ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ü—ñ–Ω—ñ—Ç—å –ø–∞—Å–∞–∂–∏—Ä–∞ (1‚Äì5):', {
      reply_markup: {
        resize_keyboard: true,
        one_time_keyboard: true,
        keyboard: [['1', '2', '3', '4', '5']],
      },
    });
  } catch (err) {
    console.error('finishOrder error', err);
    bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
  }
}




// 15) –°—Ç–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω
async function goOnline(chatId) {
  try {
    const driver = await getDriverByChatId(chatId);
    if (!driver) {
      return showMainMenu(chatId, '–°–ø–µ—Ä—à—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.');
    }

    await saveDriverByPhone(driver.phone || driver.id, {
      status: 'online',
      onlineFrom: new Date().toISOString(),
      onlineUntil: null,
      telegramChatId: String(chatId),
    });

    await bot.sendMessage(chatId, 'üü¢ –í–∏ –æ–Ω–ª–∞–π–Ω');
    showMainMenu(chatId);
  } catch (err) {
    console.error('goOnline error', err);
    bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–Ω–ª–∞–π–Ω.');
  }
}


// 16) –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å (–æ—Ñ–ª–∞–π–Ω)
async function goOffline(chatId) {
  try {
    const driver = await getDriverByChatId(chatId);
    if (!driver) {
      return showMainMenu(chatId, '–°–ø–µ—Ä—à—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.');
    }

    await saveDriverByPhone(driver.phone || driver.id, {
      status: 'offline',
      onlineFrom: null,
      onlineUntil: null,
      telegramChatId: String(chatId),
    });

    bot.sendMessage(chatId, 'üî¥ –í–∏ –æ—Ñ–ª–∞–π–Ω');
    showMainMenu(chatId);
  } catch (err) {
    console.error(err);
    bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ—Ñ–ª–∞–π–Ω.');
  }
}

// 17) –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å
async function showStatus(chatId) {
  try {
    const driver = await getDriverByChatId(chatId);
    if (!driver) {
      return showMainMenu(chatId, '–°–ø–µ—Ä—à—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.');
    }

    const from = driver.onlineFrom ? new Date(driver.onlineFrom) : null;
    const until = driver.onlineUntil ? new Date(driver.onlineUntil) : null;

    const text = `
–í–∞—à—ñ –¥–∞–Ω—ñ:
–Ü–º'—è: ${driver.name || '-'}
–¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone || '-'}
–ê–≤—Ç–æ: ${driver.carBrand || '-'}
–ù–æ–º–µ—Ä –∞–≤—Ç–æ: ${driver.carPlate || '-'}
–°—Ç–∞—Ç—É—Å: ${driver.status || '-'}
–û–Ω–ª–∞–π–Ω –∑: ${from ? from.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '-'}
–û–Ω–ª–∞–π–Ω –¥–æ: ${until ? until.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '-'}
–§–æ—Ç–æ (Telegram file_id): ${driver.photoFileId || '-'}
    `.trim();

    bot.sendMessage(chatId, text);
    showMainMenu(chatId);
  } catch (err) {
    console.error(err);
    bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å.');
  }
}

module.exports = { bot };
